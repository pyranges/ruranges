name: Build and Publish Python package (Maturin)

# Run this workflow on git tags (e.g., "v1.0.0") to trigger PyPI publishing
on:
  workflow_dispatch:

jobs:
  build:
    name: Build wheels (and sdist)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        # Matrix to build on Linux, macOS, and Windows runners

    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Fetch repository code (includes Cargo.toml, Cargo.lock, etc.)
        with:
          persist-credentials: false
        # ^ Ensures we have the source code and Cargo.lock for building. 
        #   `persist-credentials: false` is good practice for security (no repo token in subsequent steps).

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
        # ^ Install and use Python 3.12 (the minimum supported Python version for this package).
        #   This provides the `python` and `pip` executables for subsequent steps.

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
        # ^ Install the latest stable Rust toolchain (needed to compile the Rust code).
        #   `override: true` ensures this Rust version is used for all commands.
        #   Using the minimal profile to speed up installation (only essential components).

      - name: Ensure Cargo.lock is present
        run: |
          if [ ! -f Cargo.lock ]; then 
            echo "Error: Cargo.lock not found. Please commit Cargo.lock to the repo for reproducible builds." 
            exit 1 
          fi
        # ^ Verifies that Cargo.lock is checked into the repository.
        #   Including Cargo.lock in the source distribution helps ensure consistent dependencies.

      - name: Build wheels (Linux) + source distribution
        if: runner.os == 'Linux'
        uses: PyO3/maturin-action@v1  # Use Maturin GitHub Action to build on Linux
        with:
          command: build
          manylinux: "2014"           # Build manylinux2014-compatible wheels for broad Linux compatibility
          args: "--release --sdist -o dist"
        # ^ On Linux, build wheels inside a manylinux2014 container for compatibility.
        #   Also build a source distribution (`--sdist`). All artifacts will be placed in the `dist/` folder.
        #   --release builds optimized wheels. The source distribution (.tar.gz) will include Cargo.lock and all sources.

      - name: Build wheels (macOS & Windows)
        if: runner.os != 'Linux'
        uses: PyO3/maturin-action@v1  # Use Maturin Action to build on macOS/Windows
        with:
          command: build
          args: "--release -o dist"
        # ^ On macOS and Windows, build wheels natively (no manylinux needed).
        #   We skip --sdist here to avoid duplicating the source distribution.
        #   The wheels for these platforms will be placed in the `dist/` directory.

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-${{ matrix.os }}
          path: dist/
        # ^ Save the built wheels (and sdist from Linux) as artifacts named after each OS.
        #   This allows the next job to download all distributions and publish them together.

  publish:
    name: Publish to PyPI
    needs: build        # Wait for the 'build' job (all OS builds) to finish
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')  # Only run if this workflow was triggered by a tag push
    steps:
      - name: Download artifacts (Linux wheels & sdist)
        uses: actions/download-artifact@v3
        with:
          name: dist-ubuntu-latest
          path: dist
      - name: Download artifacts (macOS wheels)
        uses: actions/download-artifact@v3
        with:
          name: dist-macos-latest
          path: dist
      - name: Download artifacts (Windows wheels)
        uses: actions/download-artifact@v3
        with:
          name: dist-windows-latest
          path: dist
        # ^ Collect all distribution files from the build job. Each artifact is extracted into the `dist/` directory.
        #   After these steps, `dist/` will contain all wheels for Linux, macOS, Windows, plus the sdist (.tar.gz).

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@v1.8.14
        with:
          user: ${{ secrets.PYPI_USER }}
          password: ${{ secrets.PYPI_PROD_PASSWORD }}
        # ^ Upload the contents of the `dist/` folder to PyPI using the PyPA publish action.
        #   This action uses Twine under the hood. PyPI credentials are pulled from GitHub Secrets:
        #   - PYPI_USER: your PyPI username (or "__token__" if using an API token)
        #   - PYPI_PROD_PASSWORD: your PyPI account password or API token.
        #   Make sure to add these secrets in your repository settings. Do NOT store them in the repo.


